[project]
name = "mentat-cli"
version = "0.1.0"
description = "Mentat CLI â€” an agent-driven tool orchestrator"
readme = "README.md"
requires-python = ">=3.12"
authors = [{ name = "Mentat Team" }]
license = { text = "MIT" }
keywords = ["mentat", "cli", "agent", "tools", "cqrs", "ioc"]
dependencies = [
  "typer>=0.12.3",
  "pydantic>=2.8",
  "rich>=13",
  "textual>=0.50",
  "python-dotenv>=1.0",
  "anthropic>=0.21",
  "openai>=1.0",
]

[project.urls]
Homepage = "https://example.com/mentat-cli"

[project.scripts]
mentat = "mentat.cli:app"

[build-system]
requires = ["hatchling>=1.24.2"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/mentat"]

[tool.pytest.ini_options]
addopts = "-q --asyncio-mode=auto"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "asyncio: mark test as async"
]

[tool.uv]
managed = true

[dependency-groups]
dev = [
  "pytest>=8.3",
  "pytest-asyncio>=0.23",
  "pytest-cov>=5.0",
  "ruff>=0.6",
  "mypy>=1.10",
  "radon>=6.0.1",
]

[tool.ruff]
line-length = 100
target-version = "py312"

[tool.ruff.lint]
select = [
  "E",  # pycodestyle errors
  "F",  # pyflakes
  "I",  # isort
  "B",  # flake8-bugbear
  "W",  # pycodestyle warnings
]
ignore = [
  # allow prints in CLI/tests
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.mypy]
python_version = "3.12"
strict = false
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
no_implicit_optional = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
show_error_codes = true
pretty = true
exclude = [
  "tests/",
]

